@model List<EducationManagementStudio.Models.CustomContentModels.CustomContent>

@using EducationManagementStudio.Models.CustomContentModels
@using EducationManagementStudio.Models.AccountModels

@inject UserManager<ApplicationUser> userManager
@inject ICustomContentFileService customContentFileService

@{
    var currentUser = await userManager.GetUserAsync(User);
}

@foreach (var content in Model)
{
    if (content is CustomContentText)
    {
        var textContent = (CustomContentText)content;

        <div data-markdown="content-trim">
            @Html.Raw(textContent.Content)
        </div>
    }

    if (content is CustomContentAlert)
    {
        var alertContent = (CustomContentAlert)content;
        string alertTypeValue = String.Empty;
        var alertTypeName = Enum.GetName(typeof(CustomContentAlertType), alertContent.AlertType);
        alertTypeValue = "alert-" + alertTypeName.ToLower();

        <div class="alert alert-dismissible @alertTypeValue">
            <button type="button" class="close" data-dismiss="alert">&times;</button>
            <div data-markdown="line">@alertContent.Content</div>
        </div>
    }

    if (content is CustomContentPanel)
    {
        var panelContent = (CustomContentPanel)content;

        <div class="panel panel-@panelContent.PanelType.ToString().ToLower()">
            <div class="panel-heading">
                <h3 class="panel-title" data-markdown="line">@panelContent.Heading</h3>
            </div>
            <div class="panel-body" data-markdown="line">@panelContent.Content</div>
        </div>
    }

    if (content is CustomContentTextArea)
    {
        var textAreaContent = (CustomContentTextArea)content;

        <form class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-2 control-label">@textAreaContent.Label</label>
                <div class="col-sm-10">
                    <textarea class="form-control" rows="@textAreaContent.RowsCount" placeholder="@textAreaContent.Placeholder" data-textAreaContentElementId="@textAreaContent.Id">@textAreaContent.CustomContentResponses?.SingleOrDefault(ccr => ccr.Student.Id == currentUser.Id)?.TextAreaResponse</textarea>
                </div>
            </div>
        </form>
    }

    if (content is CustomContentFile)
    {
        var fileContent = (CustomContentFile)content;
        var hasFile = customContentFileService.HasFile(currentUser.Id, fileContent.Id);
        <form class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-2 control-label">@fileContent.Label</label>
                <div class="col-sm-10">
                    <label class="btn btn-default btn-file">
                        @fileContent.ButtonName
                        <span class="ok glyphicon glyphicon-ok" aria-hidden="true" style='display: @(hasFile?"inline":"none")'></span>
                        <span class="error glyphicon glyphicon-remove" aria-hidden="true" style="display: @(!hasFile?"inline":"none")"></span>
                        <input data-fileContentElementId="@fileContent.Id" type="file" style="display: none;" accept="@fileContent.Accept" />
                    </label>
                </div>
            </div>
        </form>
    }
}

<script>
    // text area upload

    var textAreaContentElements = document.querySelectorAll('[data-textAreaContentElementId]');
    for (var i = 0; i < textAreaContentElements.length; i++) {
        var currentComponent = textAreaContentElements[i];

        currentComponent.oninput = function (event) {
            var currentComponentId = event.srcElement.attributes['data-textAreaContentElementId'].value;
            var currentComponentValue = event.srcElement.value;

            var data = { 
                ComponentId: currentComponentId,
                Value: currentComponentValue,
                DateSent: new Date()
            }

            var request = new XMLHttpRequest();
            request.open('POST', '/api/CustomContentResponse');
            request.setRequestHeader('Content-Type', 'application/json');
            request.send(JSON.stringify(data));
            if (req.status == 200)
                dump(req.responseText);
        }
    }
</script>

<script>
    //fileUpload

    var fileContentElements = document.querySelectorAll('[data-fileContentElementId]');
    for (var i = 0; i < fileContentElements.length; i++) {
        var currentComponent = fileContentElements[i];

        currentComponent.onchange = function (event) {
            var currentComponentId = event.srcElement.attributes['data-fileContentElementId'].value;

            var formData = new FormData();
            formData.append('files', event.srcElement.files[0]);

            var request = new XMLHttpRequest();
            request.open("POST", "/api/CustomContentResponse/File/" + currentComponentId);
            request.send(formData);
            request.onload = onLoad;
            request.onerror = onError;

            function onLoad() {
                currentComponent.parentElement.querySelector('.ok').style.display = 'inline';
                currentComponent.parentElement.querySelector('.error').style.display = 'none';
            }
            function onError() {
                currentComponent.parentElement.querySelector('.ok').style.display = 'none';
                currentComponent.parentElement.querySelector('.error').style.display = 'inline';
            }
        }
    }
</script>